// Code generated by zenrpc v2.2.11; DO NOT EDIT.

package rpc

import (
	"context"
	"encoding/json"

	"github.com/vmkteam/zenrpc/v2"
	"github.com/vmkteam/zenrpc/v2/smd"
)

var RPC = struct {
	NewsService struct{ NewsByID, Categories, Tags, NewsWithFilters, NewsCountWithFilters string }
}{
	NewsService: struct{ NewsByID, Categories, Tags, NewsWithFilters, NewsCountWithFilters string }{
		NewsByID:             "newsbyid",
		Categories:           "categories",
		Tags:                 "tags",
		NewsWithFilters:      "newswithfilters",
		NewsCountWithFilters: "newscountwithfilters",
	},
}

func (NewsService) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Methods: map[string]smd.Service{
			"NewsByID": {
				Description: `NewsByID получение новости по id`,
				Parameters: []smd.JSONSchema{
					{
						Name: "id",
						Type: smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Optional: true,
					Type:     smd.Object,
					TypeName: "News",
					Properties: smd.PropertyList{
						{
							Name: "newsId",
							Type: smd.Integer,
						},
						{
							Name: "title",
							Type: smd.String,
						},
						{
							Name: "categoryId",
							Ref:  "#/definitions/Category",
							Type: smd.Object,
						},
						{
							Name: "foreword",
							Type: smd.String,
						},
						{
							Name:     "content",
							Optional: true,
							Type:     smd.String,
						},
						{
							Name: "tags",
							Type: smd.Array,
							Items: map[string]string{
								"$ref": "#/definitions/Tag",
							},
						},
						{
							Name: "author",
							Type: smd.String,
						},
						{
							Name: "publishedAt",
							Type: smd.String,
						},
					},
					Definitions: map[string]smd.Definition{
						"Category": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "categoryId",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
								{
									Name:     "orderNumber",
									Optional: true,
									Type:     smd.Integer,
								},
								{
									Name: "alias",
									Type: smd.String,
								},
							},
						},
						"Tag": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "tagId",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
					},
				},
			},
			"Categories": {
				Description: `Categories получение всех категорий`,
				Parameters:  []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Type:     smd.Array,
					TypeName: "[]Category",
					Items: map[string]string{
						"$ref": "#/definitions/Category",
					},
					Definitions: map[string]smd.Definition{
						"Category": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "categoryId",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
								{
									Name:     "orderNumber",
									Optional: true,
									Type:     smd.Integer,
								},
								{
									Name: "alias",
									Type: smd.String,
								},
							},
						},
					},
				},
			},
			"Tags": {
				Description: `Tags получение всех тегов`,
				Parameters:  []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Type:     smd.Array,
					TypeName: "[]Tag",
					Items: map[string]string{
						"$ref": "#/definitions/Tag",
					},
					Definitions: map[string]smd.Definition{
						"Tag": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "tagId",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
					},
				},
			},
			"NewsWithFilters": {
				Description: `NewsWithFilters получение новости с фильтрами`,
				Parameters: []smd.JSONSchema{
					{
						Name:     "categoryID",
						Optional: true,
						Type:     smd.Integer,
					},
					{
						Name:     "tagID",
						Optional: true,
						Type:     smd.Integer,
					},
					{
						Name:     "page",
						Optional: true,
						Type:     smd.Integer,
					},
					{
						Name:     "pageSize",
						Optional: true,
						Type:     smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Type:     smd.Array,
					TypeName: "[]NewsSummary",
					Items: map[string]string{
						"$ref": "#/definitions/NewsSummary",
					},
					Definitions: map[string]smd.Definition{
						"NewsSummary": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "newsId",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
								{
									Name: "categoryId",
									Ref:  "#/definitions/Category",
									Type: smd.Object,
								},
								{
									Name: "foreword",
									Type: smd.String,
								},
								{
									Name: "tags",
									Type: smd.Array,
									Items: map[string]string{
										"$ref": "#/definitions/Tag",
									},
								},
								{
									Name: "author",
									Type: smd.String,
								},
								{
									Name: "publishedAt",
									Type: smd.String,
								},
							},
						},
						"Category": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "categoryId",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
								{
									Name:     "orderNumber",
									Optional: true,
									Type:     smd.Integer,
								},
								{
									Name: "alias",
									Type: smd.String,
								},
							},
						},
						"Tag": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "tagId",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
					},
				},
			},
			"NewsCountWithFilters": {
				Description: `NewsCountWithFilters получение количества новостей с фильтрами`,
				Parameters: []smd.JSONSchema{
					{
						Name:     "categoryID",
						Optional: true,
						Type:     smd.Integer,
					},
					{
						Name:     "tagID",
						Optional: true,
						Type:     smd.Integer,
					},
					{
						Name:     "page",
						Optional: true,
						Type:     smd.Integer,
					},
					{
						Name:     "pageSize",
						Optional: true,
						Type:     smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Optional: true,
					Type:     smd.Integer,
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s NewsService) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}
	var err error

	switch method {
	case RPC.NewsService.NewsByID:
		var args = struct {
			Id int `json:"id"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"id"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.NewsByID(args.Id))

	case RPC.NewsService.Categories:
		resp.Set(s.Categories())

	case RPC.NewsService.Tags:
		resp.Set(s.Tags())

	case RPC.NewsService.NewsWithFilters:
		var args = struct {
			CategoryID *int `json:"categoryID"`
			TagID      *int `json:"tagID"`
			Page       *int `json:"page"`
			PageSize   *int `json:"pageSize"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"categoryID", "tagID", "page", "pageSize"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.NewsWithFilters(args.CategoryID, args.TagID, args.Page, args.PageSize))

	case RPC.NewsService.NewsCountWithFilters:
		var args = struct {
			CategoryID *int `json:"categoryID"`
			TagID      *int `json:"tagID"`
			Page       *int `json:"page"`
			PageSize   *int `json:"pageSize"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"categoryID", "tagID", "page", "pageSize"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.NewsCountWithFilters(args.CategoryID, args.TagID, args.Page, args.PageSize))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}
